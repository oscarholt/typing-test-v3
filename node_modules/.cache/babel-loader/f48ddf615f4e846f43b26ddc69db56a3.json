{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oscar\\\\Desktop\\\\Workspace\\\\typing-test-v3\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getCloud = () => \"oscar testing react nextjs macbook windows\".split(\" \").sort(() => Math.random() > 0.5 ? 1 : -1);\n\nfunction Word(props) {\n  const {\n    text,\n    active,\n    correct\n  } = props;\n\n  if (correct === true) {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"correct\",\n      children: [text, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (correct === false) {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"incorrect\",\n      children: [text, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (active) {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"active\",\n      children: [text, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: [text, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 10\n  }, this);\n}\n\n_c = Word;\n\nfunction App() {\n  _s();\n\n  const [userInput, setUserInput] = useState(\"\");\n  const cloud = useRef(getCloud());\n  const [activeWordIndex, setActiveWordIndex] = useState(0);\n\n  function processInput(value) {\n    if (value.endsWith(\" \")) {\n      //user has finished with this word\n      setActiveWordIndex(index => index + 1);\n      setUserInput(\"\");\n    } else {\n      setUserInput(value);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Typing Test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: cloud.current.map((word, index) => {\n        return /*#__PURE__*/_jsxDEV(Word, {\n          text: word,\n          active: index === activeWordIndex,\n          correct: null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: userInput,\n      onChange: e => processInput(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"2PxqrdlHni+sSS9SEWiWVaasqEU=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Word\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["C:/Users/oscar/Desktop/Workspace/typing-test-v3/src/App.js"],"names":["React","useState","useRef","getCloud","split","sort","Math","random","Word","props","text","active","correct","App","userInput","setUserInput","cloud","activeWordIndex","setActiveWordIndex","processInput","value","endsWith","index","current","map","word","e","target"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AACA,OAAO,WAAP;;;AAEA,MAAMC,QAAQ,GAAG,MACf,6CACGC,KADH,CACS,GADT,EAEGC,IAFH,CAEQ,MAAOC,IAAI,CAACC,MAAL,KAAgB,GAAhB,GAAsB,CAAtB,GAA0B,CAAC,CAF1C,CADF;;AAKA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AACnB,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,MAAR;AAAgBC,IAAAA;AAAhB,MAA4BH,KAAlC;;AAEA,MAAIG,OAAO,KAAK,IAAhB,EAAsB;AACpB,wBAAO;AAAM,MAAA,SAAS,EAAC,SAAhB;AAAA,iBAA2BF,IAA3B;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AACD,MAAIE,OAAO,KAAK,KAAhB,EAAuB;AACrB,wBAAO;AAAM,MAAA,SAAS,EAAC,WAAhB;AAAA,iBAA6BF,IAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AACD,MAAGC,MAAH,EAAU;AACR,wBAAO;AAAM,MAAA,SAAS,EAAC,QAAhB;AAAA,iBAA0BD,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBAAO;AAAA,eAAOA,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;KAdQF,I;;AAgBT,SAASK,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAMe,KAAK,GAAGd,MAAM,CAACC,QAAQ,EAAT,CAApB;AAEA,QAAM,CAACc,eAAD,EAAkBC,kBAAlB,IAAwCjB,QAAQ,CAAC,CAAD,CAAtD;;AAEA,WAASkB,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,QAAIA,KAAK,CAACC,QAAN,CAAe,GAAf,CAAJ,EAAyB;AACvB;AACAH,MAAAA,kBAAkB,CAAEI,KAAD,IAAWA,KAAK,GAAG,CAApB,CAAlB;AACAP,MAAAA,YAAY,CAAC,EAAD,CAAZ;AACD,KAJD,MAIO;AACLA,MAAAA,YAAY,CAACK,KAAD,CAAZ;AACD;AACF;;AAED,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,gBACGJ,KAAK,CAACO,OAAN,CAAcC,GAAd,CAAkB,CAACC,IAAD,EAAOH,KAAP,KAAiB;AAClC,4BACE,QAAC,IAAD;AACE,UAAA,IAAI,EAAEG,IADR;AAEE,UAAA,MAAM,EAAEH,KAAK,KAAKL,eAFpB;AAGE,UAAA,OAAO,EAAE;AAHX;AAAA;AAAA;AAAA;AAAA,gBADF;AAOD,OARA;AADH;AAAA;AAAA;AAAA;AAAA,YAFF,eAaE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,KAAK,EAAEH,SAFT;AAGE,MAAA,QAAQ,EAAGY,CAAD,IAAOP,YAAY,CAACO,CAAC,CAACC,MAAF,CAASP,KAAV;AAH/B;AAAA;AAAA;AAAA;AAAA,YAbF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD;;GArCQP,G;;MAAAA,G;AAuCT,eAAeA,GAAf","sourcesContent":["import React, { useState, useRef } from \"react\"\r\nimport './App.css'\r\n\r\nconst getCloud = () =>\r\n  \"oscar testing react nextjs macbook windows\"\r\n    .split(\" \")\r\n    .sort(() => (Math.random() > 0.5 ? 1 : -1))\r\n\r\nfunction Word(props) {\r\n  const { text, active, correct } = props\r\n\r\n  if (correct === true) {\r\n    return <span className='correct'>{text} </span>\r\n  }\r\n  if (correct === false) {\r\n    return <span className='incorrect'>{text} </span>\r\n  }\r\n  if(active){\r\n    return <span className=\"active\">{text} </span>\r\n  }\r\n\r\n  return <span>{text} </span>\r\n}\r\n\r\nfunction App() {\r\n  const [userInput, setUserInput] = useState(\"\")\r\n  const cloud = useRef(getCloud())\r\n\r\n  const [activeWordIndex, setActiveWordIndex] = useState(0)\r\n\r\n  function processInput(value) {\r\n    if (value.endsWith(\" \")) {\r\n      //user has finished with this word\r\n      setActiveWordIndex((index) => index + 1)\r\n      setUserInput(\"\")\r\n    } else {\r\n      setUserInput(value)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Typing Test</h1>\r\n      <p>\r\n        {cloud.current.map((word, index) => {\r\n          return (\r\n            <Word\r\n              text={word}\r\n              active={index === activeWordIndex}\r\n              correct={null}\r\n            />\r\n          )\r\n        })}\r\n      </p>\r\n      <input\r\n        type='text'\r\n        value={userInput}\r\n        onChange={(e) => processInput(e.target.value)}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n"]},"metadata":{},"sourceType":"module"}